https://repo.spring.io/release/org/springframework/spring/ 下载地址

一、ioc原理
   1、什么是 IOC
   （1）控制反转，把对象创建和对象之间的调用过程，交给 Spring 进行管理
   （2）使用 IOC 目的：为了耦合度降低
   （3）做入门案例就是 IOC 实现
   2、IOC 底层原理
   （1）xml 解析、工厂模式、反射


二、IOC（BeanFactory 接口）

   1、IOC 思想基于 IOC 容器完成，IOC 容器底层就是对象工厂
   2、Spring 提供 IOC 容器实现两种方式：（两个接口）
   （1）BeanFactory：IOC 容器基本实现，是 Spring 内部的使用接口，不提供开发人员进行使用
   * 加载配置文件时候不会创建对象，在获取对象（使用）才去创建对象
   （2）ApplicationContext：BeanFactory 接口的子接口，提供更多更强大的功能，一般由开发人
   员进行使用
   * 加载配置文件时候就会把在配置文件对象进行创建

   ioc在创建对象时：创建对象时候，默认也是执行无参数构造方法完成对象创建
   DI：依赖注入，就是注入属性

三、IOC 操作 Bean 管理（xml 注入其他类型属性）

  1、字面量
  （1）null 值
  <!--null 值--> <property name="address">
   <null/>
  </property> （2）属性值包含特殊符号
  <!--属性值包含特殊符号
   1 把<>进行转义 &lt; &gt;
   2 把带特殊符号内容写到 CDATA
  --><property name="address">
   <value><![CDATA[<<南京>>]]></value>
  </property>

四、spring属性注入关于数组集合、map
    <!--数组-->
           <property name="courses">
               <array>
                   <value>天空</value>
                   <value>大海</value>
               </array>
           </property>

           <!--list-->
           <property name="list">
               <list>
                   <value>list1</value>
                   <value>list2</value>
               </list>
           </property>

           <!--map-->
           <property name="maps">
               <map>
                   <entry key="map1" value="map1Value1"/>
                   <entry key="map2" value="map1Value2"/>
               </map>
           </property>

           <!--set-->
           <property name="sets">
               <set>
                   <value>set1</value>
                   <value>set2</value>
               </set>
           </property>



五、IOC 操作 Bean 管理（bean 生命周期）
  1、生命周期
  （1）从对象创建到对象销毁的过程
  2、bean 生命周期
  （1）通过构造器创建 bean 实例（无参数构造）
  （2）为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）
  （3）调用 bean 的初始化的方法（需要进行配置初始化的方法）
  （4）bean 可以使用了（对象获取到了）
  （5）当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）

  3、bean 的后置处理器，bean 生命周期有七步 实现BeanPostProcessor
  （1）通过构造器创建 bean 实例（无参数构造）
  （2）为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）
  （3）把 bean 实例传递 bean 后置处理器的方法 postProcessBeforeInitialization （4）调用 bean 的初始化的方法（需要进行配置初始化的方法）
  （5）把 bean 实例传递 bean 后置处理器的方法 postProcessAfterInitialization
  （6）bean 可以使用了（对象获取到了）
  （7）当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）

六、自动注入：
       * byName:根据属性和id名一致
       * byType:属性的类型一致，只匹配一个


七、引入properties，例如阿里连接池

八、<!--不使用默认的过滤器
        只扫描org.springframework.stereotype.Controller（com.zhang包下的Controller注解下的注解）
        -->
      <context:component-scan base-package="com.zhang" use-default-filters="false">
          <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
      </context:component-scan>

     <!--下面配置扫描包所有内容
     context:exclude-filter： 设置哪些内容不进行扫描
    -->
        <context:component-scan base-package="com.zhang">
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"/>
        </context:component-scan>

九、 @Autowired
     根据属性类型进行自动装配
    @Qualifier(value = "userServiceImpl1")
     如果接口有多个实现类，就可以使用这个来区分，根据名称自动装配

     @Resources 是javax的，默认根据类型自动注入
       根据名称(name="");

十、完全配置类
    new AnnotationConfigApplicationContext(SpringConfig.class);


十一、AOP（概念）
   1、什么是 AOP
   （1）面向切面编程（方面），利用 AOP 可以对业务逻辑的各个部分进行隔离，从而使得
   业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。
   （2）通俗描述：不通过修改源代码方式，在主干功能里面添加新功能

   2、AOP 底层使用动态代理
  （1）有两种情况动态代理
   第一种 有接口情况，使用 JDK 动态代理
   ⚫ 创建接口实现类代理对象，增强类的方法

   第二种 没有接口情况，使用 CGLIB 动态代理
   ⚫ 创建子类的代理对象，增强类的方法


十二、aop术语
   1、连接点
      类里面哪些方法可以被增强，这些方法叫连接点
   2、切入点
      实际被增强的方法被称为切入点
   3、通知
      实际增强的逻辑部分为通知
   4、切面
      是动作，把通知应用到切入点过程

   5、切入点表达式
     （1）切入点表达式作用：知道对哪个类里面的哪个方法进行增强
     （2）语法结构： execution([权限修饰符] [返回类型] [类全路径] [方法名称]([参数列表]) )
   通知的类型：前置、后置、环绕、异常、最终

十三、//相同的切入点抽取
       @Pointcut(value = "execution(* com.zhang.aop.bean.User.*(..)")
       public void pointCut(){

       }

       @Before(value = "pointCut()")
       public void befor1(){

       }


十四、
    有多个增强类多同一个方法进行增强，设置增强类优先级
   （1）在增强类上面添加注解 @Order(数字类型值)，数字类型值越小优先级越高
   @Component
   @Aspect
   @Order(1)
   public class PersonProxy

   (2)完全使用注解开发 （1）创建配置类，不需要创建 xml 配置文件
   @Configuration
   @ComponentScan(basePackages = {"com.atguigu"})
   @EnableAspectJAutoProxy(proxyTargetClass = true)
   public class ConfigAop {
   }