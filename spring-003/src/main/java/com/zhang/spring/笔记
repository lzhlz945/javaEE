https://repo.spring.io/release/org/springframework/spring/ 下载地址

一、ioc原理
   1、什么是 IOC
   （1）控制反转，把对象创建和对象之间的调用过程，交给 Spring 进行管理
   （2）使用 IOC 目的：为了耦合度降低
   （3）做入门案例就是 IOC 实现
   2、IOC 底层原理
   （1）xml 解析、工厂模式、反射


二、IOC（BeanFactory 接口）

   1、IOC 思想基于 IOC 容器完成，IOC 容器底层就是对象工厂
   2、Spring 提供 IOC 容器实现两种方式：（两个接口）
   （1）BeanFactory：IOC 容器基本实现，是 Spring 内部的使用接口，不提供开发人员进行使用
   * 加载配置文件时候不会创建对象，在获取对象（使用）才去创建对象
   （2）ApplicationContext：BeanFactory 接口的子接口，提供更多更强大的功能，一般由开发人
   员进行使用
   * 加载配置文件时候就会把在配置文件对象进行创建

   ioc在创建对象时：创建对象时候，默认也是执行无参数构造方法完成对象创建
   DI：依赖注入，就是注入属性

三、IOC 操作 Bean 管理（xml 注入其他类型属性）

  1、字面量
  （1）null 值
  <!--null 值--> <property name="address">
   <null/>
  </property> （2）属性值包含特殊符号
  <!--属性值包含特殊符号
   1 把<>进行转义 &lt; &gt;
   2 把带特殊符号内容写到 CDATA
  --><property name="address">
   <value><![CDATA[<<南京>>]]></value>
  </property>

四、spring属性注入关于数组集合、map
    <!--数组-->
           <property name="courses">
               <array>
                   <value>天空</value>
                   <value>大海</value>
               </array>
           </property>

           <!--list-->
           <property name="list">
               <list>
                   <value>list1</value>
                   <value>list2</value>
               </list>
           </property>

           <!--map-->
           <property name="maps">
               <map>
                   <entry key="map1" value="map1Value1"/>
                   <entry key="map2" value="map1Value2"/>
               </map>
           </property>

           <!--set-->
           <property name="sets">
               <set>
                   <value>set1</value>
                   <value>set2</value>
               </set>
           </property>



五、IOC 操作 Bean 管理（bean 生命周期）
  1、生命周期
  （1）从对象创建到对象销毁的过程
  2、bean 生命周期
  （1）通过构造器创建 bean 实例（无参数构造）
  （2）为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）
  （3）调用 bean 的初始化的方法（需要进行配置初始化的方法）
  （4）bean 可以使用了（对象获取到了）
  （5）当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）

  3、bean 的后置处理器，bean 生命周期有七步 实现BeanPostProcessor
  （1）通过构造器创建 bean 实例（无参数构造）
  （2）为 bean 的属性设置值和对其他 bean 引用（调用 set 方法）
  （3）把 bean 实例传递 bean 后置处理器的方法 postProcessBeforeInitialization （4）调用 bean 的初始化的方法（需要进行配置初始化的方法）
  （5）把 bean 实例传递 bean 后置处理器的方法 postProcessAfterInitialization
  （6）bean 可以使用了（对象获取到了）
  （7）当容器关闭时候，调用 bean 的销毁的方法（需要进行配置销毁的方法）

六、自动注入：
       * byName:根据属性和id名一致
       * byType:属性的类型一致，只匹配一个