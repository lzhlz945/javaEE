<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zhang.mapper.EmployeeMapper1">

    <cache type="org.mybatis.caches.ehcache.EhcacheCache" eviction="FIFO"></cache>
    <!-- <cache eviction="FIFO" flushInterval="60000" readOnly="false" size="1024"></cache> -->
    <!--
    eviction:缓存的回收策略：
        • LRU – 最近最少使用的：移除最长时间不被使用的对象。
        • FIFO – 先进先出：按对象进入缓存的顺序来移除它们。
        • SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。
        • WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。
        • 默认的是 LRU。
    flushInterval：缓存刷新间隔
        缓存多长时间清空一次，默认不清空，设置一个毫秒值
    readOnly:是否只读：
        true：只读；mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。
                 mybatis为了加快获取速度，直接就会将数据在缓存中的引用交给用户。不安全，速度快
        false：非只读：mybatis觉得获取的数据可能会被修改。
                mybatis会利用序列化&反序列的技术克隆一份新的数据给你。安全，速度慢
    size：缓存存放多少元素；
    type=""：指定自定义缓存的全类名；
            实现Cache接口即可；
    -->
    <!--第一resultMap:
     id:引用唯一标识； type:指定的bean类型
    -->
    <resultMap id="resultMapByEmployee" type="com.zhang.tx.bean.Employee">
        <!--id:主键的，column=数据库的字段名，property：javaBean的对应属性名-->
        <id column="id" property="id"/>
        <!---->
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
    </resultMap>

    <!--第一种关联其他表的字段-->
    <resultMap id="resultMapByEmployee1" type="com.zhang.tx.bean.Employee">
        <!--id:主键的，column=数据库的字段名，property：javaBean的对应属性名-->
        <id column="id" property="id"/>
        <!---->
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        <result column="did" property="dept.id"/>
        <result column="dept_name" property="dept.deptName"/>

    </resultMap>

    <!--第二种关联其他表的字段-->
    <resultMap id="resultMapByEmployee33" type="com.zhang.tx.bean.Employee">
        <!--id:主键的，column=数据库的字段名，property：javaBean的对应属性名-->
        <id column="id" property="id"/>
        <!---->
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        <!--  association可以指定联合的javaBean对象
		property="dept"：指定哪个属性是联合的对象employee中的dept
		javaType:指定这个属性对象的类型[不能省略]
		-->
        <association property="dept"  javaType="com.zhang.tx.bean.Department">
        <result column="did" property="id"/>
        <result column="dept_name" property="deptName"/>
        </association>

    </resultMap>

    <resultMap id="resultMapByEmployee3" type="com.zhang.tx.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        <result column="dp_id" property="did"/>
        <association property="dept" javaType="com.zhang.tx.bean.Department">
            <result column="id" property="id" />
            <result column="dep_name" property="deptName"/>
        </association>
    </resultMap>
    <!--第三种：分步封装-->

    <resultMap id="resultMapByEmployee4" type="com.zhang.tx.bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        <result column="dp_id" property="did"/>
        <association property="dept" javaType="com.zhang.tx.bean.Department"
                     select="com.zhang.mapper.DepartmentMapper.getById" column="{id=dp_id}" fetchType="eager"><!--延迟加载开关-->
                     <!--延迟加载开关-->

        </association>

    </resultMap>

    <select id="test3" resultMap="resultMapByEmployee3">
        SELECT
       *
        FROM
        tbl_employee e left JOIN tbl_department d
        on  e.dp_id=d.id
        where e.dp_id=#{did}
    </select>
    <select id="getId4" resultMap="resultMapByEmployee4">
      select id,last_name,email,gender,dp_id from tbl_employee where last_name = #{lastName}

    </select>
    <select id="getId3" resultMap="resultMapByEmployee3">
      SELECT e.id id,e.last_name last_name,e.gender gender,e.dp_id d_id,
		d.id did,d.dep_name dept_name FROM tbl_employee e,tbl_department d
		WHERE e.dp_id=d.id AND e.id=#{id}

    </select>


    <select id="getId1" resultMap="resultMapByEmployee1">
      	 	SELECT e.id id,e.last_name last_name,e.gender gender,e.dp_id d_id,
		d.id did,d.dep_name dept_name FROM tbl_employee e,tbl_department d
		WHERE e.dp_id=d.id AND e.id=#{id}
    </select>
    <select id="getId" resultMap="resultMapByEmployee">
      select id,last_name,email,gender from tbl_employee where id = #{id}

    </select>

    <!--List<Employee> selectByDeptId(Integer deptId);-->
    <select id="selectByDeptId" resultType="com.zhang.tx.bean.Employee">
         select id,last_name lastName,email,gender from tbl_employee where dp_id = #{deptId}
    </select>

    <resultMap id="ss" type="com.zhang.tx.bean.Employee">
        <id column="id" property="id"/>
        <!---->
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        <discriminator javaType="string" column="gender">
            <case value="0" resultType="com.zhang.tx.bean.Employee">
                <association property="dept" select="com.zhang.mapper.DepartmentMapper.getById" column="id">
                </association>
            </case>
            <case value="1" resultType="com.zhang.tx.bean.Employee">
                <id column="id" property="id"/>
                <result column="last_name" property="email"/>
                <result column="gender" property="lastName"/>
                <result column="email" property="email"/>
            </case>
        </discriminator>
    </resultMap>

    <select id="selectByDiscriminator" resultMap="ss">
       select id,last_name lastName,email,gender from tbl_employee where id = #{id}
    </select>

    <sql id="sql1">
        id,last_name lastName,email,gender
    </sql>
    <select id="getEmps" resultMap="resultMapByEmployee3">
        select <include refid="sql1"></include>
        from tbl_employee
    </select>
</mapper>