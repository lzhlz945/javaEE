一、@RequestMapping

    @RequestMapping 的 value、method、params 及 heads
    分别表示请求 URL、请求方法、请求参数及请求头的映射条件，他们之间是与的关系，联合使用多个条件可让请求映射
    更加精确化


二、@PathVariable 映射

   @PathVariable 映射 URL 绑定的占位符
   • 带占位符的 URL 是 Spring3.0 新增的功能，该功能在
   SpringMVC 向 REST 目标挺进发展过程中具有里程碑的
   意义 • 通过 @PathVariable 可以将 URL 中占位符参数绑定到控
   制器处理方法的入参中：URL 中的 {xxx} 占位符可以通过 @PathVariable("xxx") 绑定到操作方法的入参中。

   @RequestMapping(/url/{id})
   public String test(@PathVariable("id") Integer id)

三、
   使用${Path}  web.xml 版本大于2.3

   reset风格  get查询 put跟新 post添加 delete删除

   HiddenHttpMethodFilter 可以将post转化为DELETE 和POST

四、注解Param、Header

   @RequestParam(value = "id",defaultValue = "1",required = false) Integer id

   @RequestHeader(value = "Accept-Language") String id

   +@CookieValue(value = "JSESSIONID") String sessionId


五、POJO

    自定义返回类，可以级联


六、返回的model map ->modelMap  @SessionAttributes

   @SessionAttributes(value = {"user"},types = {String.class})
   map.put("user",user);  value = {"user"}
   map.put("mapAndSession","mapAndSessionTest"); types = {String.class}


七、InternalResourceViewResolver
  • 若项目中使用了 JSTL，则 SpringMVC 会自动把视图由
  InternalResourceView 转为 JstlView
  • 若使用 JSTL 的 fmt 标签则需要在 SpringMVC 的配置文件中配置国际 化资源文件

      <bean class="org.springframework.context.support.ResourceBundleMessageSource" id="messageSource">
          <property name="basename" value="i18n"/>
      </bean>

      <fmt:message key="i18n.password"/>


八、自定义视图
    1、实现View,并加入到spring中
    2、在mvc：xml中：

          <!-- 配置视图  BeanNameViewResolver 解析器: 使用视图的名字来解析视图 -->
          <!-- 通过 order 属性来定义视图解析器的优先级, order 值越小优先级越高 -->
          <bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
              <property name="order" value="100"></property>
          </bean>

九、rest风格不建议使用.do和.html

    前端会出现404

      <mvc:default-servlet-handler/>
      <mvc:annotation-driven/>


十、<a></a> 超链接转换成post请求

    1、 <a class="delete" href="/deleteEmps/${emp.id}"></a>
    2、 <form action="" method="POST" >
         <input type="hidden" name="DELETE"/>
        </form>
    3、
      $(function({
         $(".delete").click(function(){
             var href= $(this).attr("href");
             $("form").attr("action",href).submit();

         })


      })



十一、spring-form标签

    一般情况下，通过 GET 请求获取表单页面，而通过
    POST 请求提交表单页面，因此获取表单页面和提交表单 页面的 URL 是相同的。只要满足该最佳条件的契
    约，<form:form> 标签就无需通过 action 属性指定表单
    提交的 URL
    • 可以通过 modelAttribute 属性指定绑定的模型属性，若
    没有指定该属性，则默认从 request 域对象中读取
    command 的表单 bean，如果该属性值也不存在，则会 发生错误。
    表单标签
    • SpringMVC 提供了多个表单组件标签，如
    <form:input/>、<form:select/> 等，用以绑定表单字段的
    属性值，它们的共有属性如下：
    – path：表单字段，对应 html 元素的 name 属性，支持级联属性
    – htmlEscape：是否对表单值的 HTML 特殊字符进行转换，默认值
    为 true
    – cssClass：表单组件对应的 CSS 样式类名 – cssErrorClass：表单组件的数据存在错误时，采取的 CSS 样式
    表单标签
    • form:input、form:password、form:hidden、form:textarea
    ：对应 HTML 表单的 text、password、hidden、textarea
    标签
    • form:radiobutton：单选框组件标签，当表单 bean 对应的
    属性值和 value 值相等时，单选框被选中 • form:radiobuttons：单选框组标签，用于构造多个单选
    框– items：可以是一个 List、String[] 或 Map
    – itemValue：指定 radio 的 value 值。可以是集合中 bean 的一个
    属性值 – itemLabel：指定 radio 的 label 值 – delimiter：多个单选框可以通过 delimiter 指定分隔符
    表单标签
    • form:checkbox：复选框组件。用于构造单个复选框 • form:checkboxs：用于构造多个复选框。使用方式同
    form:radiobuttons 标签
    • form:select：用于构造下拉框组件。使用方式同
    form:radiobuttons 标签
    • form:option：下拉框选项组件标签。使用方式同
    form:radiobuttons 标签
    • form:errors：显示表单组件或数据校验所对应的错误 – <form:errors path= “ *” /> ：显示表单所有的错误
    – <form:errors path= “ user*” /> ：显示所有以 user 为前缀的属性对应
    的错误
    – <form:errors path= “ username” /> ：显示特定表单对象属性的错误


十二、mvc:annotation-driven

    关于 mvc:annotation-driven
    • <mvc:annotation-driven /> 会自动注册
    RequestMappingHandlerMapping、
    RequestMappingHandlerAdapter 与
    ExceptionHandlerExceptionResolver 三个bean。

    • 还将提供以下支持：
    – 支持使用 ConversionService 实例对表单参数进行类型转换
    – 支持使用 @NumberFormat annotation、@DateTimeFormat
    注解完成数据类型的格式化
    – 支持使用 @Valid 注解对 JavaBean 实例进行 JSR 303 验证
    – 支持使用 @RequestBody 和 @ResponseBody 注解


十三、@InitBinder

   • 由 @InitBinder 标识的方法，可以对 WebDataBinder 对 象进行初始化。WebDataBinder 是 DataBinder 的子类，用
   于完成由表单字段到 JavaBean 属性的绑定 • @InitBinder方法不能有返回值，它必须声明为void。 • @InitBinder方法的参数通常是是 WebDataBinder

   public void initBinder(WebDataBinder webDataBinder){
       webDataBinder.setDisallowsFields(xxx);
   }


十四、数据格式化


     • 对属性对象的输入/输出进行格式化，从其本质上讲依然
     属于 “类型转换” 的范畴。
     • Spring 在格式化模块中定义了一个实现
     ConversionService 接口的
     FormattingConversionService 实现类，该实现类扩展 了 GenericConversionService，因此它既具有类型转换的
     功能，又具有格式化的功能
     • FormattingConversionService 拥有一个
     FormattingConversionServiceFactroyBean 工厂类，
     后者用于在 Spring 上下文中构造前者


十五、 数据格式化
    • FormattingConversionServiceFactroyBean 内部已经注册了 : – NumberFormatAnnotationFormatterFactroy：支持对数字类型的属性
    使用 @NumberFormat 注解
    – JodaDateTimeFormatAnnotationFormatterFactroy：支持对日期类型
    的属性使用 @DateTimeFormat 注解
    • 装配了 FormattingConversionServiceFactroyBean 后，就可
    以在 Spring MVC 入参绑定及模型数据输出时使用注解驱动
    了。<mvc:annotation-driven/> 默认创建的
    ConversionService 实例即为
    FormattingConversionServiceFactroyBean


    实例：
        1、mvc:xml 驱动注解
           <mvc:annotation-driven/> 默认创建的ConversionService
           实例即为FormattingConversionServiceFactroyBean

       @DateTimeFormat(pattern="yyyy-MM-dd hh:mm:ss")
       private Date date;

       @NumberFormat(pattern="#,###,###.#")
       private float number